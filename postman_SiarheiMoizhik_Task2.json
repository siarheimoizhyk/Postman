{
	"info": {
		"_postman_id": "597edbb0-864a-417d-a825-1f8fc46f3e66",
		"name": "HMPostman2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. http://162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"body right string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос http://162.55.220.72:5005/user_info_3 \r",
							"\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"\r",
							"let nameCheck = responseJson.name;\r",
							" let enterName = \"Andrey\";\r",
							"\r",
							"pm.test(\"Name Andrey\", function () {\r",
							"\r",
							"    pm.expect(enterName).to.eql(nameCheck);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"\r",
							"let ageCheck = responseJson.age;\r",
							" let enterAge = \"37\";\r",
							"\r",
							"pm.test(\"Age 37\", function () {\r",
							"\r",
							"    pm.expect(enterAge).to.eql(ageCheck);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"\r",
							"let salaryCheck = responseJson.salary;\r",
							" let enterSalary = 1800;\r",
							"\r",
							"pm.test(\"Salary 1800\", function () {\r",
							"\r",
							"    pm.expect(enterSalary).to.eql(salaryCheck);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"// console.log(\"request =\", req)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"\r",
							"let  enterName2 = request.data.name;\r",
							" let nameCheck2 = \"Andrey\";\r",
							"\r",
							"pm.test(\"Name Andrey request\", function () {\r",
							"\r",
							"    pm.expect(nameCheck2).to.eql(enterName2);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"\r",
							"let  enterAge2 = request.data.age;\r",
							" let ageCheck2 = \"37\";\r",
							"\r",
							"pm.test(\"Age 37 request\", function () {\r",
							"\r",
							"    pm.expect(ageCheck2).to.eql(enterAge2);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary2 = request.data.salary;\r",
							" let salaryCheck2 = \"1800\";\r",
							"\r",
							"pm.test(\"Salary 1800 request\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck2).to.eql(enterSalary2);\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family = responseJson.family;\r",
							"\r",
							"console.log(family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let salary_1_5 = request.data.salary * 4;\r",
							"let  salary_1_5_check = responseJson.family.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Salary check * 4\", function () {\r",
							"       pm.expect(salary_1_5_check).to.eql(salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос. http://162.55.220.72:5005/object_info_3\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req =  request.data;\r",
							"\r",
							"// console.log(\"request =\", req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"\r",
							"let  enterName = req.name;\r",
							" let nameCheck = responseJson.name;\r",
							"\r",
							"pm.test(\"Name Andrey request\", function () {\r",
							"\r",
							"    pm.expect(nameCheck).to.eql(enterName);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"\r",
							"let  enterAge = req.age;\r",
							" let ageCheck = responseJson.age;\r",
							"\r",
							"pm.test(\"Age request\", function () {\r",
							"\r",
							"    pm.expect(ageCheck).to.eql(enterAge);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary = Number(req.salary);\r",
							" let salaryCheck = responseJson.salary;\r",
							"\r",
							"pm.test(\"Salary request\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck).to.eql(enterSalary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family = responseJson.family;\r",
							"\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"\r",
							"pm.test(\"Dog have param 'name' \", function(){\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property('name')})\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Dog have param 'age' \", function(){\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property('age')})\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog name is Luky\", function(){\r",
							"pm.expect(responseJson.family.pets.dog.name).to.deep.equal('Luky')});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"\r",
							"pm.test(\"Dog age is 4\", function(){\r",
							"pm.expect(responseJson.family.pets.dog.age).to.deep.equal(4)});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Andrey&age=37&salary=1800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос. http://162.55.220.72:5005/object_info_4\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let responceData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"\r",
							"let  enterName = req.name;\r",
							" let nameCheck = responceData.name;\r",
							"\r",
							"pm.test(\"Name Andrey request\", function () {\r",
							"\r",
							"    pm.expect(nameCheck).to.eql(enterName);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let  enterAge = req.name;\r",
							" let ageCheck = responceData.name;\r",
							"\r",
							"pm.test(\"Age 37 request\", function () {\r",
							"\r",
							"    pm.expect(ageCheck).to.eql(enterAge);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"let requestSalary = req.salary;\r",
							"console.log(requestSalary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"let responseSalary = responceData.salary;\r",
							"console.log(responseSalary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(responseSalary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(responseSalary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"\r",
							"console.log(responseSalary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"let  enterSalary = Number(req.salary);\r",
							" let salaryCheck = responseSalary[0];\r",
							"\r",
							"pm.test(\"Salary first element\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck).to.eql(enterSalary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary2 = req.salary * 2;\r",
							" let salaryCheck2 = Number(responseSalary[1]);\r",
							"\r",
							"pm.test(\"Salary second element\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck2).to.eql(enterSalary2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary3 = req.salary * 3;\r",
							"let salaryCheck3 = Number(responseSalary[2]);\r",
							"\r",
							"pm.test(\"Salary third element\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck3).to.eql(enterSalary3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name    -  Environments -> New Environment ->  add name, age, salary + Save\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name   - No Environments switch to name of your environment + Save\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let salaryFromMassive = responceData.salary;\r",
							"for (let i = 0; i <= 2; i++) {\r",
							"\tconsole.log(salaryFromMassive[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?age=37&name=Andrey&salary=1800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "salary",
							"value": "1800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5. http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"json response have param 'start_qa_salary' \", function(){\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary')\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"json response have param 'qa_salary_after_6_months' \", function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"json response have param 'qa_salary_after_12_months' \", function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"json response have param 'qa_salary_after_1.5_year' \", function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"json response have param 'qa_salary_after_3.5_years' \", function(){\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"json response have param 'person' \", function(){\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary = Number(reqData.salary);\r",
							"let salaryCheck = jsonData.start_qa_salary;\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck).to.eql(enterSalary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary2 = Number(reqData.salary) * 2;\r",
							"let salaryCheck2 = jsonData.qa_salary_after_6_months;\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck2).to.eql(enterSalary2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary3 = Number(reqData.salary) * 2.7;\r",
							"let salaryCheck3 = jsonData.qa_salary_after_12_months;\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck3).to.eql(enterSalary3);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary4 = Number(reqData.salary) * 3.3;\r",
							"// let salaryCheck4 = 5940;\r",
							"let salaryCheck4 = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"// console.log(enterSalary4)\r",
							"// console.log(salaryCheck4)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck4).to.eql(enterSalary4);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary5 = Number(reqData.salary) * 3.8;\r",
							"// let salaryCheck5 = 6840;\r",
							"let salaryCheck5 = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck5).to.eql(enterSalary5);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"let  enterSalary_u_name = Number(reqData.salary);\r",
							"\r",
							"pm.test(\"1-й элемент из u_name равен salary\", function(){\r",
							"pm.expect(jsonData.person.u_name[1]).to.deep.equal(enterSalary_u_name)});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"let  enter_u_age = Number(reqData.age);\r",
							"\r",
							"pm.test(\"u_age равен age из request\", function(){\r",
							"pm.expect(jsonData.person.u_age).to.deep.equal(enter_u_age)});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"let  enterSalary6 = Number(reqData.salary) * 4.2;\r",
							"let salaryCheck6 = jsonData.person.u_salary_5_years;\r",
							"\r",
							"\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"\r",
							"    pm.expect(salaryCheck6).to.eql(enterSalary6);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let personList = jsonData.person\r",
							"\r",
							"for (const property in personList) {\r",
							"    console.log(`${property}: ${personList[property]}`);\r",
							"  }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}